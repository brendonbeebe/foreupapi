FORMAT: 1A
HOST: https://mobile.foreupsoftware.com/api_rest/index.php/

# foreUp API
        
The foreUp API can be used to access sales data, tee time usage, and other information from courses you have permission to access.  

The responses follow the JSONapi spec, read about it here: http://jsonapi.org/.

They have several imeplementations for parsing responses here: http://jsonapi.org/implementations/.

# Group Secured Access


## Authentication [/tokens]


### Create a New Token [POST]

To authenticate with the api you must first create a JWT using your username/password.  To learn more about JWT go here: https://jwt.io/.

+ Request (application/json)

            {
            "email": "testaccount@test.com",
            "password": "testaccount@test.com"
            }

+ Response 200 (application/json)

    + Body

            {
              "data": {
                "type": "token",
                "id": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0NzQ5MjI5MzgsImV4cCI6MTQ3NzUxNDkzOCwibGV2ZWwiOjAsImNpZCI6MCwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjY0ODI3Mjh9.go-Bf_6X8qByMu9JblewsmQt1dsqOu_70z6IlYYaZgGbsvjf9uQI0-RFSEivALntv0HF6-6WN9T5FxLpGyxcNA",
                "attributes": []
              }
            }
            
# Group Single Sign On

## Authentication [/tokens/validate/{token}]


### Validate a Recieved Token [GET]

When a course access your app we'll send a JWT across.  This JWT contains the course id, employee id, and employee email.  The audience should be the url  you gave us.  You need to validate the token with us before accepting it as fact. 
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0OTQwMTU3NjAsImV4cCI6MTQ5NjYwNzc2MCwibGV2ZWwiOjEsImNpZCI6OTAzOSwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjcxNzk5MDUsImFwaVZlcnNpb24iOm51bGwsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ah0lO0-I-Vv2RhTEOJK9lAfURrTd88LqzdvxpkaVxJ_02zH4NOjuLl9F8fYVleU5cY6Mk5n-TgOK4tDwiKJBgg

+ Parameters
    + token : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzc1OTUzOTYsImV4cCI6MTUwODY5OTM5NiwibGV2ZWwiOjEsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6NTQ3ODY1MCwiZW1wSWQiOjU0Nzg2NTAsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.lHiBf6aoIEbhDTBATMUrnO7oJIqsIm13Zl7zyIQoYKxeF0WBbL0oxk2AWxSy13hOQJVjI4pOMgT0p5u1majTag (string,required) -

+ Response 200 (application/json)

    + Body

            {
              "valid": true 
            }

# Group Courses 
    
## Courses [/courses{?include}]

This endpoint will list all the courses which you have access too.

### List All[GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE2MjczOTg3OTYsImV4cCI6MTYyOTk5MDc5NiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjcxNzk5MDUsImFwaVZlcnNpb24iOm51bGwsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.CufuQeilJIi2w428jScRfNelkx1h_rb-UBz1rg63pE6BKZfA2LWvf4v35xU_41m2aRuZCyUgwot70C-3k5IFTw
+ Parameters
    + include : teesheets (enum[string],optional) - Which relationships to include in the response.  The hours a tee sheet can be booked, and the sides that belong to the tee sheet are automatically included when include=teesheets is added.
        + Members
            + `teesheets`
            + `teesheets.holes`
      
+ Response 200 (application/json)

    + Attributes
        + data (array[Courses])


## Sales [/courses/{courseId}/sales{?include,startDate,endDate,start,limit}]

### Get One [GET /courses/{courseId}/sales/{saleId}{?include}]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + saleId : 24378234 (string) - A course id that the user has permission to access.
    + include : items (enum[string],optional) - Which relationships to include in response. 
        + Members
            + `items`
            + `terminals`
            + `bookings`
            + `customer`
+ Response 200 (application/json)

    + Attributes
        + data (Sales)
        
### List All [GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + limit: 10 (integer, optional)- Total results to show (Max: 100).
    + start: 0 (integer, optional)- Which result to start on.
    + startDate : `2016-07-06` (date,optional) - Must limit the sales returned to a single date.
    + endDate : `2016-07-08` (date,optional) - Must limit the sales returned to a single date.
    + include : items (enum[string],optional) - Which relationships to include in response. 
        + Members
            + `items`
            + `terminals`
            + `bookings`
            + `customer`
+ Response 200 (application/json)

    + Attributes
        + data (array[Sales])


## Tee Sheets [/courses/{courseId}/teesheets{?include}]

### Get All [GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE2MjczMjkzOTQsImV4cCI6MTYyOTkyMTM5NCwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjcxNzk5MDUsImFwaVZlcnNpb24iOm51bGwsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.sj-lqjPhj4XINThrcisUiqnutt7AbNgH81YeTmgvoEFyBQPEa5H0--9m9FgLPcXcvJml66xyEmgGsCE44On0mQ
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + include : `holes` (enum[string],optional) - Which relationships to include in response. Tee sheet sides will automatically be included in the response. 
        + Members
            + `holes`

+ Response 200 (application/json)

    + Attributes
        + data (array[Tee Sheets])

## Terminals [/courses/{courseId}/terminals]

### Get All [GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (array[Terminals])

## Price Classes [/courses/{courseId}/priceClasses]

### Get All [GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (array[Price Class])

### Get One [GET /courses/{courseId}/priceClasses/{priceClassId}]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + priceClassId : 5 - The price class ID

+ Response 200 (application/json)

    + Attributes
        + data (Price Class)
        
### Create [POST]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
         
    + Attributes
        + data (Price Class)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (Price Class)
        
### Update [PUT /courses/{courseId}/priceClasses/{priceClassId}]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
         
    + Attributes
        + data (Price Class)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + priceClassId : 5 - The price class ID

+ Response 200 (application/json)

    + Attributes
        + data (Price Class)

## Employees [/courses/{courseId}/employees{?include,start,limit}]

+ Model
    
    + Body

            {
              "data": [
                {
                  "type": "employees",
                  "id": "5478650",
                  "attributes": {
                    "user_level": 1,
                    "position": "",
                    "username": "tnash1",
                    "activated": 1,
                    "last_login": {
                      "date": "2016-10-17 04:25:41.000000",
                      "timezone_type": 3,
                      "timezone": "America/Denver"
                    },
                    "contact_info": {
                      "id": 5478650,
                      "first_name": "Trevor",
                      "last_name": "nash",
                      "phone_number": "",
                      "cell_phone_number": "",
                      "email": "fake@fake.com",
                      "birthday": null,
                      "address_1": "",
                      "address_2": "",
                      "city": "",
                      "state": "",
                      "zip": "",
                      "country": "",
                      "comments": ""
                    }
                  }
                }
              ]
            }

### Get All [GET]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + limit: 10 (integer, optional)- Total results to show (Max: 100).
    + start: 0 (integer, optional)- Which result to start on.

+ Response 200 (application/json)

    [Employees][]

## Carts [/courses/{courseId}/carts/{cartId}]

### Create Cart [POST /courses/{courseId}/carts]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (Carts) 

### Get Cart [GET /courses/{courseId}/carts/{cartId}{?include}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 38133556 (string)
    + include : `cartItems`,`cartItems.items` (enum[string],optional) - Which relationships to include in response. 
        + Members
            + `cartItems`
            + `cartItems.items`
            + `customers`
+ Response 200 (application/json)

    + Attributes
        + data (Carts) 

### Add Payment [POST /courses/{courseId}/carts/{cartId}/payments]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Cart Payment)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 56 (string)
            
+ Response 200 (application/json)

    + Attributes
        + data (Carts) 
       
        
### Add Customer [POST /courses/{courseId}/carts/{cartId}/customers]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Cart Customer)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 56 (string)
            
+ Response 200 (application/json)

    + Attributes
        + data (Carts) 
        
### Complete Cart [PUT]
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Carts Complete)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 56 (string)
    
+ Response 200 (application/json)

    + Attributes
        + data (Sales) 

## Cart Items [/courses/{courseId}/carts/{cartId}/items]

### Delete Line Item [DELETE /courses/{courseId}/carts/{cartId}/items/{line}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 38133556 (string)
    + line : 1 (string)
+ Response 200 (application/json)

    + Attributes
        + data (Cart Items) 

### Update Line Item [PUT /courses/{courseId}/carts/{cartId}/items/{line}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
   
    + Attributes
        + data (Cart Items)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 38133556 (string)
    + line : 1 (string)
    
+ Response 200 (application/json)

    + Attributes
        + data (Cart Items) 

### Add Line Item [POST /courses/{courseId}/carts/{cartId}/items]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
   
    + Attributes
        + data (Cart Items)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + cartId : 38133556 (string)
    
+ Response 200 (application/json)

    + Attributes
        + data (Cart Items) 

# Group Tee Sheets
Foreup is currently in the process of a major architectural overhaul of our tee sheet functionality. Our old tee sheet only allowed 
users to create tee sheets with two sides which only supported up to an 18 hole setup. Our revamped tee sheet theoretically supports 
any number of sides/holes, but is currently artificially capped at 6 sides or 54 holes.  

There are several changes to the API when a facility is switched to our revamped tee sheet. Facilities that are considered to have a 27+ hole 
course setup will be changing drastically.  In the old tee sheet these facilities had to be setup with multiple tee sheets as a work around 
for having more than 18 holes. A side effect of this is that these facilities could have integrations book times on almost all sides 
even though our api at the time only allowed booking on the front side. When these facilities are moved over to our revamped tee sheet
their setup is changed so they only have a single tee sheet. In order to keep equivalent functionality in the API we have built out
support to book tee times on any side if the facility is using our revamped tee sheet.  This applies to any size tee sheet so although
for 18 hole courses your integration doesn't need to change much if you want to take advantage of back 9 booking you'll want to update
your integration.

All endpoints that pertain to tee times and available tee time slots will now return a new attribute called teeSheetSideId or 
scheduleSideId.  These two fields represent the same thing.  All tee sheets now have a collection of sides with information 
like side name, order(order side is displayed in), and id.  When you use the tee sheet endpoint to pull all of a facilities tee sheets
this info is automatically included if the facility is using our revamped tee sheet.

The final change on our revamped tee sheet has to do with allowed group sizes.  On the old tee sheet you could only set a minimum 
and maximum group size and any value in between was allowed. So if the min was 2 and the max was 5 a golfer could book if their group had
2, 3, 4, or 5 players in it.  The revamped tee sheet changes this to allow more granular restrictions.  You can now specifically specify 
any group size you want to allow.  For example it is now possible to say you only want to allow groups of 2 or 4.  In this scenario groups 
of 1, 3, and 5 would not be allowed. The tee time slots endpoint will return an 'allowedGroupSizes' array with this information in it.

To help in identifying what facilities are using our revamped tee sheet we've added an attribute to the courses endpoint called 
'tee_sheet_version'. If the value is set to '2.0.0' or higher then they are on our revamped tee sheet and will require passing a 
teeSheetSideId to many endpoints to take advantage of any new functionality introduced by the revamped tee sheet.  If they are still on 
our old tee sheet 'tee_sheet_version' will be set to '1.0.0'

## Tee Time Slots [/courses/{courseId}/teesheets/{teesheetId}/teetimes{?startTime,endTime,date,customerId,priceClassId,holes,bookingClassId,scheduleSideId}]

Each slot can have multiple bookings totalling up to 4 players.

### Get All [GET ]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE2MjczMjkzOTQsImV4cCI6MTYyOTkyMTM5NCwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjcxNzk5MDUsImFwaVZlcnNpb24iOm51bGwsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.sj-lqjPhj4XINThrcisUiqnutt7AbNgH81YeTmgvoEFyBQPEa5H0--9m9FgLPcXcvJml66xyEmgGsCE44On0mQ
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
    + startTime : `0800` (string,required) - Find tee times starting with this time.
    + endTime : `1500` (string,required) - Find tee times up to this time.
    + date : `2017-01-18`,`sales` (string,required) - Date of tee time slots
    + bookingClassId : 1 (integer,optional) - View tee times using a booking class id
    + customerId: 9039 (integer,optional) - Show pricing in regards to a customer
    + priceClassId: 3 (integer,optional) - Show pricing with the given price class id.
    + holes: 18 (integer,optional) - Show availability for either 9 or 18 holes
    + scheduleSideId: 1 "all" (integer | string,optional) - This parameter will do nothing if the course is not using our revamped tee sheet. Filters slots by a specific side.  If no side id is specified the endpoint will return time slots for ONLY the first side of the tee sheet.  If you would like to get ALL slots at once pass the option "all" instead of a side id.
            
+ Response 200 (application/json)

    + Attributes
        + data (array[Tee Time Slot]

## Booked Players [/courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}/bookedPlayers/{bookedPlayerId}]

Each booking has 5 available spots.  These spots are "Booked Players".  A booked player can be linked to an actual customer in the crm or given just a title like "Guest."  Each player can be assigned a unique price class.

#### Example

A member books a time for him and two of his buddies.  The system should create one booking, for 3 players.  The first booked player will be linked to his unique customer id and should be assigned the "member" price class.  The other two spots should be labeled as "Guest" and be assigned the "Public" price class.

[![name](http://i.imgur.com/XGhPw6W.png)](http://i.imgur.com/XGhPw6W.png) 


### Update [PUT]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
                 
    + Attributes
        + data (Booked Player) 
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 1530 (string) - A tee sheet id that the user has permission to access.
    + bookingId : TTID_0929103348mnhfo (string) - A tee sheet id that the user has permission to access.
    + bookedPlayerId : `TTID_0929103348mnhfo-1` (string) - Booking position unique id
            
+ Response 200 (application/json)

    + Attributes
        + data (Booked Player)

## Bookings [/courses/{courseId}/teesheets/{teesheetId}/bookings{?include,startDate,endDate,start,limit}]

Bookings don't contain any pricing information and are purely the bookings on a teesheet.  
To get pricing information from a booking that's already been paid for you must include the sales relationship.  The sales object will include the customer information, payment details, and item details.

### Get One [GET /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}{?include}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (string) - A tee sheet id that the user has permission to access.
    + bookingId : TTID_1018142720xb6jt (string) - A tee sheet id that the user has permission to access.
    + include : `players`,`sales` (enum[string],optional) - Which relationships to include in response. 
        + Members
            + `players`
            + `sales`
            + `sales.items`
            + `bookedPlayers`
            + `bookedPlayers.people`
            + `bookedPlayers.priceClasses`
            
+ Response 200 (application/json)

    + Attributes
        + data (Bookings)

### Update [PUT /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}{?include}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
                 
    + Attributes
        + data (Bookings) 
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 1530 (string) - A tee sheet id that the user has permission to access.
    + bookingId : TTID_0929103348mnhfo (string) - A tee sheet id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (Bookings)

### Get Pricing [GET /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}/pricing]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + bookingId : TTID_1018142720xb6jt (string)
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (array[Booking Pricing]

### Create One [POST /courses/{courseId}/teesheets/{teesheetId}/bookings]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Bookings Creation)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (string) - A tee sheet id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (Bookings)     
        
### Delete One [DELETE /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (string) - A tee sheet id that the user has permission to access.
    + bookingId : TTID_1018142720xb6jt (string) - A booking id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (Bookings)    
        
### Check In [POST /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}/checkIn]

+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Check In)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + bookingId : TTID_1018142720xb6jt (string)
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (Carts)  

### Override Pricing [POST /courses/{courseId}/teesheets/{teesheetId}/bookings/{bookingId}/priceOverride]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Price Override)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + bookingId : TTID_1018142720xb6jt (string)
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (Price Override)

### Get All [GET]

###How should I distinguish green fees from other item?
Green fees and carts will have a category of "Green Fees" and "Carts" respectively.  The department can be customized but a course can't adjust the category.

###Is it possible to include players and sales.items at the same time ?
Yes, add this to your query: include=players,sales,sales.items

###How do you identify the booking type? (Customer, Member, Public, etc)
The sales_items object containes an attribute "PriceClass" that designates the green fee type.

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 1530 (integer) - A tee sheet id that the user has permission to access.
    + limit: 10 (integer, optional)- Total results to show (Max: 100).
    + start: 0 (integer, optional)- Which result to start on.
    + startDate : `2016-09-29` (date,optional) - Must limit the sales returned to a single date.
    + endDate : `2016-09-30` (date,optional) - Must limit the sales returned to a single date.
    + include : `players`,`sales` (enum[string],optional) - Which relationships to include in response.
        + Members
            + `players`
            + `sales`
            + `sales.items`
            + `bookedPlayers`
            + `bookedPlayers.people`
            + `bookedPlayers.priceClasses`

+ Response 200 (application/json)

    + Attributes
        + data (array[Bookings]


## Specials [/courses/{courseId}/teesheets/{teesheetId}/specials]

### Get All [GET]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (array[Special]

### Get One [GET /courses/{courseId}/teesheets/{teesheetId}/specials/{specialId}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
    + specialId: 5134 (integer)

+ Response 200 (application/json)

    + Attributes
        + data (array[Special]

### Update [PUT /courses/{courseId}/teesheets/{teesheetId}/specials/{specialId}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Special)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
    + specialId: 5134 (integer)

+ Response 200 (application/json)

    + Attributes
        + data (array[Special]

### Create [POST]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Special)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (array[Special]

## Stats [/courses/{courseId}/teesheets/{teesheetId}/stats{?date,start,end}]

### Get All [GET]

This endpoint is limited to a maximum of one day.  Occupancy is calculated by the number of slots available to potential slots.  It's possible to have a single booking for 1 person be stretched across multiple slots.

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
    + date : `2016-05-19` (date,optional) - Must limit the stats returned to a single date.
    + start : `2016-05-19T00:00` (date,optional)
    + end : `2016-05-19T23:00` (date,optional)

+ Response 200 (application/json)

            {
              "data": {
                "type": "teesheet_stats",
                "id": "2016-09-28",
                "attributes": {
                  "bookings": 1,
                  "occupancy": 0.003,
                  "playerNoShows": 1,
                  "playersCheckedIn": 0,
                  "revenue": 486.30,
                  "potential_slots":100,
                  "slots_available":0
                }
              }
            }
            
## Trades [/courses/{courseId}/teesheets/{teesheetId}/tradesAvailable/{date}]

### Get [GET]

This endpoint is limited to a single date. You must first be authorized to participate in selling trades in order to successfully get trade information. The response (for an authorized user) shows how many trades are available for sale for a specific teesheet on a given day.  

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (integer) - A tee sheet id that the user has permission to access.
    + date : `2016-05-19` (date) - Must limit the trades returned to a single date.

+ Response 200 (application/json)

            {
              "data": {
                "type": "trade",
                "id": "1",
                "attributes": {
                  "tradesAvailable": 0
                }
              }
            }

### Create [POST /courses/{courseId}/teesheets/{teesheetId}/bookings]
This endpoint is nearly identical to creating a booking as laid out in the documentation above. In order to properly create a trade, your user must be authorized. Otherwise, the trade will not be created an error message will be returned. You will not be credited for the trade unless your user is authorized to participate in trades.
Please note the additional 3 key/value pairs required to successfully book a trade (`isTrade`, `amountCharged`, & `tax`). If any of those three argumentsare missing, an error message will be returned.
+ Request (application/json)

    + Headers
    
            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A
    
    + Attributes
        + data (Trade Creation)
        
+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192 (string) - A tee sheet id that the user has permission to access.
            
+ Response 200 (application/json)

    + Attributes
        + data (Trades)     
        
# Group Tee Time Pricing

Tee time pricing is extremely flexible. There are three important parts to tee time pricing.

- Price Clases
    * A course can have as many price classes as they want.  These are essentially customer categories such as member, guest, senior, junior, etc
- Season
    * This is a date range such as, winter, summer, august, etc.
- Time Frames
    * Each season can have multiple time frames. Time frames are a time range, examples include twilight, afternoon, evening, etc.
    * Time Frames contain the price, there is a default time frame for each price class / season.



[![name](https://s3-us-west-2.amazonaws.com/foreup.course.images/Blank+Diagram+-+Page+1.png)](https://s3-us-west-2.amazonaws.com/foreup.course.images/Blank+Diagram+-+Page+1.png)

## Seasons [/courses/{courseId}/teesheets/{teesheetId}/seasons{?include}]

### Get All [GET]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`

+ Response 200 (application/json)

    + Attributes
        + data (array[Seasons])

### Get One [GET /courses/{courseId}/teesheets/{teesheetId}/seasons/{seasonId}{?include}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`

+ Response 200 (application/json)

    + Attributes
        + data (Seasons)

### Update [PATCH /courses/{courseId}/teesheets/{teesheetId}/seasons/{seasonId}{?include}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Seasons)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`

+ Response 200 (application/json)

    + Attributes
        + data (Seasons)

### Create [POST /courses/{courseId}/teesheets/{teesheetId}/seasons{?include}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Seasons)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`

+ Response 200 (application/json)

    + Attributes
        + data (Seasons)

## Seasonal Timeframes [/courses/{courseId}/teesheets/{teesheetId}/seasons/{seasonId}/timeframes{?include}]

### Get All [GET]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`
            + `seasons`

+ Response 200 (application/json)

    + Attributes
        + data (array[Seasonal Timeframes])

### Get One [GET /courses/{courseId}/teesheets/{teesheetId}/seasons/{seasonId}/timeframes/{timeframeId}{?include}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + timeframeId : 64736
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`
            + `seasons`

+ Response 200 (application/json)

    + Attributes
        + data (Seasonal Timeframes)

### Update [PUT /courses/{courseId}/teesheets/{teesheetId}/seasons/{seasonId}/timeframes/{timeframeId}{?include}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Seasonal Timeframes)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + timeframeId : 64736
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`
            + `seasons`

+ Response 200 (application/json)

    + Attributes
        + data (Seasonal Timeframes)

### Create [POST]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Seasonal Timeframes)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + teesheetId : 2192
    + seasonId : 4810
    + include : classes (enum[string],optional) - Which relationships to include in response.
        + Members
            + `classes`
            + `seasons`

+ Response 200 (application/json)

    + Attributes
        + data (Seasonal Timeframes)

# Group Customers

## Customer Collection [/courses/{courseId}/customers{?limit,start}]

You can search on any number of fields by adding the field name to the query.

```
/resource?field_name=op:value
```

* ```field_name``` - The name of the field.

* ```op``` - (Optional) The comparison operator to use when comparing the specified value to the field. Defaults to eq.
  * eq (Equal)
  * gt (Greater Than)
  * gte (Greater Than or Equal)
  * lt (Less Than)
  * lte (Less Than or Equal)

* ```value``` - The value being checked for.

Examples

```/courses/9039/customers?email=eq:foreup@fake.com ```
```/courses/9039/customers?birthday=gt:2012-12-08 ```

See https://github.com/AmeriCommerce/rest-api/blob/master/query_syntax.md for more examples

### List All [GET]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + start : 0 (integer,optional) - Which result to start on.
    + limit : 10 (integer,optional) - Total results to show.

+ Response 200 (application/json)


    + Attributes
        + data (array[Customer])

### Customer Searchable Fields [GET /courses/{courseId}/customers/fields]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Response 200 (application/json)

    + Attributes
        + data (array[Searchable Fields])


### Get One [GET /courses/{courseId}/customers/{customerId}{?include,limit,start}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Customer)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + customerId : 6647556

+ Response 200 (application/json)

    + Attributes
        + data (array[Customer])

### Update [PUT /courses/{courseId}/customers/{customerId}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Customer)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + customerId : 6647556

+ Response 200 (application/json)

    + Attributes
        + data (Customer)

### Create [POST /courses/{courseId}/customers]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (Customer)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (Customer)

## Customer Sales [/courses/{courseId}/customers/{customerId}/sales{?include,limit,start}]

### List All [GET]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + customerId : 3612897 - The customer id.
    + limit: 10 (integer,optional) - Total results to show (Max: 100).
    + start: 0 (integer,optional) - Which result to start on.
    + include : items (enum[string],optional) - Which relationships to include in response.
        + Members
            + `items`
+ Response 200 (application/json)

    + Attributes
        + data (array[Sales])



# Group Inventory
## Item Collection [/courses/{courseId}/items{?limit,start,filter,q,include,format}]

Inventory Items consist of Item Kits, Items, Service Fees, Passes, Food and Beverage items, and Punch Cards.  This does not include tee times which are handled separately.

Creating an item requires certain fields to be set. To avoid errors, be aware of the required fields prior to sending your data. We encourage you to fill out as many fields as you can to ensure that the items show up as intended.

The following API calls demonstrate how to manipulate a simple item.

### List All [GET]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + limit: 1 (integer,optional) - Total results to show (Max: 100).
    + start: 0 (integer,optional) - Which result to start on.
    + format:  `csv` (enum[string], optional) - Alternate formats: Comma seperated value, and simple array of itemIds
        + Members
            + `csv`
            + `simple`
    + filter: retail (enum[string], optional) - What item type to limit results to
        + Members
            + `retail`
            + `fb`
            + `side`
    + q: anything(string,optional) - Searches by name, itemNumber, department, category, subcategory, and glCode
    + include : itemModifiers (enum[string],optional) - Which relationships to include in the response.
        + Members
            + `upcs`
            + `itemModifiers`
            + `itemSides`

+ Response 200 (application/json)

            {
              "data": [
                {
                  "type": "items",
                  "id": "6418",
                  "attributes": {
                    "maxDiscount": 100,
                    "addOnPrice": 0,
                    "costPrice": 0,
                    "courseId": 9039,
                    "quantity": 0,
                    "numberOfSides": 0,
                    "unitPrice": 0,
                    "category": "",
                    "itemNumber": null,
                    "name": "",
                    "subcategory": "",
                    "department": "",
                    "description": "",
                    "glCode": null,
                    "isInactive": true,
                    "doNotPrint": false,
                    "deleted": false,
                    "isfoodAndBeverage": false,
                    "isFoodAndBeverage": false,
                    "isInvisible": false,
                    "isFee": false,
                    "isServiceFee": false,
                    "isGiftcard": false,
                    "isPass": false,
                    "isSide": false,
                    "isUnlimited": false,
                    "isSoupOrSalad": true,
                    "unitPriceIncludesTax": false,
                    "itemType": "item",
                    "serviceFeeId": null
                  },
                  "relationships": {
                    "taxes": {
                      "data": [
                        {
                          "type": "itemTax",
                          "id": "9039_6418_Sales Tax_6.750"
                        },
                        {
                          "type": "itemTax",
                          "id": "9039_6418_Sales Tax 2_1.050"
                        }
                      ]
                    }
                  }
                }
              ],
              "included": [
                {
                  "type": "itemTax",
                  "id": "9039_6418_Sales Tax_6.750",
                  "attributes": {
                    "courseId": 9039,
                    "cid": 0,
                    "itemId": 6418,
                    "name": "Sales Tax",
                    "percent": "6.750",
                    "cumulative": 0
                  }
                },
                {
                  "type": "itemTax",
                  "id": "9039_6418_Sales Tax 2_1.050",
                  "attributes": {
                    "courseId": 9039,
                    "cid": 0,
                    "itemId": 6418,
                    "name": "Sales Tax 2",
                    "percent": "1.050",
                    "cumulative": 0
                  }
                }
              ],
              "meta": {
                "total": 478
              }
            }
        
### Get One [GET /courses/{courseId}/items/{itemId}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + itemId : 38133556 (string)
    
+ Response 200 (application/json)

    + Attributes
        + data (Item)
        
### Delete [DELETE /courses/{courseId}/items/{itemId}]

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + itemId : 38133556 (string)
    
+ Response 200 (application/json)

    + Attributes
        + data (Item)

### Create [POST]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (CreateItem)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (Item)

### PUT [PUT /courses/{courseId}/items/{itemId}]
Updating an item through the API comes with the restriction of only updating simple attributes. See the available attributes in the `PUT` example. These attributes are the only acceptable attributes for this endpoint.
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (UpdateItem)
        + meta (TestingMeta, optional)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + itemId: `` (string, required)

+ Response 200 (application/json)

    + Attributes
        + data (Item)
    
### Create Food/Bev [POST]
Here is an example of `CREATE` and `PUT` for a Food and Beverage type object.
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (CreateFBItem)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.

+ Response 200 (application/json)

    + Attributes
        + data (CreatedFBItem)
        
### PUT Food/Bev [PUT /courses/{courseId}/items/{itemId}]
Updating a food and beverage item through the API comes with the restriction of only updating simple attributes. See the available attributes in the example. These attributes are the only acceptable attributes for this endpoint.
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Attributes
        + data (UpdateFoodItem)
        + meta (TestingMeta, optional)

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + itemId: `` (string, required)

+ Response 200 (application/json)

    + Attributes
        + data (CreatedFBItem)
        
        

## Transaction Collection [/courses/{courseId}/inventory{?include,startDate,endDate,limit,start}]

    This is a record of each adjustment made to a courses inventory.  A negative number signifies one less item is available while a positive number means an item was added.

### List All [GET]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + courseId : 9039 - A course id that the user has permission to access.
    + limit: 10 (Integer, optional)- Total results to show (Max: 100).
    + start: 0 (Integer, optional)- Which result to start on.
    + startDate : `2016-05-19` (date,optional) - Must limit the sales returned to a single date.
    + endDate : `2016-05-19` (date,optional) - Must limit the sales returned to a single date.
    + include : items (enum[string],optional) - Which relationships to include in the response.
        + Members
            + `employees`
            + `sales`
            + `items`
+ Response 200 (application/json)

            {
              "data": [
                {
                  "type": "inventory",
                  "id": "8810",
                  "attributes": {
                    "comment": "Manual Edit of Quantity",
                    "adjustmentAmount": -1,
                    "courseId": 9039,
                    "itemId": 5286,
                    "itemNumber": 0,
                    "transDate": {
                      "date": "2016-09-01 11:31:29.000000",
                      "timezone_type": 3,
                      "timezone": "America/Denver"
                    }
                  }
                }
              ]
            }

# Group Webhook

A webhook allows you to recieve instant feedback when ever something happens on the foreUp system.  See a list of the available events [below](#reference/webhook-events/delete).

We recommend using [Request Bin](https://requestb.in/) to play with the hooks.  It will record all calls from our system to the hook and help you understand how the calls are made.

## Hooks Collection [/hooks]

### List All [GET]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Response 200 (application/json)

    + Attributes
        + data (array[Webhook])


### Create [POST]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

    + Body

    + Attributes
        + data (Webhook)

+ Response 200 (application/json)

    + Attributes
        + data (Webhook)

### Delete [DELETE /hooks/{id}]
+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Response 200 (application/json)

            {
              "success": true
            }


# Group Webhook Events

    foreUp’s Event Webhook will notify a URL of your choice via HTTP POST with information about events that occur in a course.
        These events include:

## Customer Updated (Event key: customer.updated)

This event triggers when a customer is edited

* From within the customer module
* From the tee sheet
* From logging into online booking and editing their own information

        {
            "event":"customer.updated",
            "course_id":"9039",
            "id":"342234432"
        }

## Tee Time Updated (Event key: teetime.updated)

The only way to know how a tee time has changed is by issueing a seperate call to our servers to get information on the tee time.  We recommend refreshing your local information about a tee time every time this calls comes through.

This event triggers when:

* An employee clicks the update button in the tee sheet
* The tee time is moved from within the tee sheet

        {
            "event":"teetime.updated",
            "course_id":"9039",
            "teesheet_id":12,
            "id":"342234432"
        }

## Tee Time Deleted (Event key: teetime.deleted)

This triggers when:

* A customer cancels the tee time from online booking
* An employee deletes the time

        {
            "event":"teetime.deleted",
            "course_id":"9039",
            "teesheet_id":12,
            "id":"342234432"
        }

## Sale Created (Event key: sale.created)

Sales may or may not have a customer attached.  This event triggers any time a sale is complete through the POS.

        {
            "event":"sale.created",
            "course_id":"9039",
            "id":"342234432"
        }

# Data Structures

## Headers (object)
+ x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

## Webhook (object)
+ type: api_hooks (string,required)
+ id: 1 (string, optional)
+ attributes (object)
    + url:  https://requestb.in/18unim81 (string,required) - The URL we'll call when the event occurs
    + event:  customer.updated (enum[string],required) - Which event to listen to.
        + Members
            + sale.created
            + teetime.deleted
            + teetime.updated
    + headerKey: x-authorizationkey (string, optional) - For authorization you can set a single key/value pair
    + headerValue: sometokenorsomething (string, optional) - The value for the key above

## Sales (object)
+ type: sales (string,required)
+ id: 1 (string, optional)
+ attributes (object)
    + employeeId:  5478650 (number,required) - The id of the employee completing the sale
    + guestCount:  3 (number,optional) - Number of guests on the sale.  Used in reporting.
    + number:  485 (number,required) - The customer facing sale number. Used on reciepts
    + paymentType: `Credit Card: $21.00` (string)
    + refundComment: `` (string)
    + refundReason: `` (string)
    + total: 21 (number)
    + subtotal: 21 (number)
    + tax: 0 (number)
    + deleted: false (boolean)
+ relationships (object)
    + items (object)
    + terminals (object)
    + bookings (object)




## Sales Items
+ type: sales_items (string,required) - Type of Object
+ id: 183873271 (string,required) - Unique idenetifier for a course
+ attributes (object)
    + total: 52.38 (number),
    + subTotal: 47.62 (number),
    + tax: 2.38 (number),
    + quantity: 1 (number),
    + unitPrice: 50 (number),
    + discountPercent: 0 (number),
    + profit: 47.62 (number),
    + department: `Public Green Fees` (string),
    + category: `Green Fees` (string),
    + subcategory: `` (string),
    + glCode: `` (string),
    + itemNumber: `9039_seasonal_1` (string),
    + itemId: 122925 (number),
    + name: `18 Holes` (string)
    + description: `` (string)
    + priceClass: `Non-Res. - Adult` (string)
    + priceClassId: 5 (string)


## Courses (object)
+ type: courses (string,required) - Type of Object
+ id: 9039 (string,required) - Unique idenetifier for a course
+ attributes (object)
    + title: Cascade (string) - Name of course
    + street: The place (string) - Street address of the course
    + city: Cityville (string) - City of the course
    + state: UT (string) - State of the course
    + zip: 84097 (string) - Zip of the course
    + phone: 1231231234 (string)
    + course_summary: `` (string) - Brief summary of the course
    + base_color: `` (string) - Color used in mobile app
    + tee_sheet_version: "1.0.0" (string) - The version of the tee sheet the course is using and what tee sheet functionality the API will support for this course. If the course is using our revamped tee sheet with the new tee sheet sides architecture the value will be "2.0.0" or higher.

## Tee Sheets (object)
+ type: terminals (string,required)
+ id: 6 (string,required)
+ attributes (object)
    + title: Exec 9 holes (string) - Name of the tee sheet
    + courseId: 6279 (number) - Course the tee sheet belongs to
    + holes: 18 (number) - Number of holes on the tee sheet.  Currently the value will be between 9 - 54

## Terminals (object)
+ type: terminals (string,required)
+ id: 6 (string,required)
+ attributes (object)
    + title: Pro Shop (string)

## Seasons
+ type: seasons (string,required)
+ id: 2 (string,optional)
+ attributes (object)
    + name: Default Season (string)
    + startDate: `0000-01-01` (string)
    + endDate: `0000-12-31` (string)
    + isManaged: true (boolean)

## Seasonal Timeframes
+ type: timeframes (string,required)
+ id: 8 (string,optional)
+ attributes (object)
    + name: Default (string)
    + monday: false (boolean)
    + tuesday: false (boolean)
    + wednesday: false (boolean)
    + thursday: false (boolean)
    + friday: false (boolean)
    + saturday: false (boolean)
    + sunday: false (boolean)
    + 9holePrice: 10 (number)
    + 9cartPrice: 15 (number)
    + 18holePrice: 25 (number)
    + 18cartPrice: 30 (number)
    + startTime: 0 (number)
    + endTime: 2400 (number)
    + `default`: false (boolean)
+ relationships (object)
    + classes (object)
        + data (object, required)
            + type: classes (string, required)
            + id: 5 (string, required)

## Date Time (object)
+ date: `2016-09-29 13:26:00.000000` (string)
+ timezone_type: 3 (number)
+ timezone: `American/Denver` (string)

## Booked Player (object)
+ type: bookedPlayer (string,required)
+ id: 1TTID_0929103348mnhfo-1 (string,optional)
+ attributes (object)
    + name: John Smith (string) - It's possible to put a name on a slot without creating a person object.  Include this field only if you don't have a person object for the customer.
    + paid: false (boolean) - Was this paid for through the POS
    + cartPaid: false (boolean) - Were the carts paid for through the POS
    + noShow: false (boolean) - Was this explicetly marked as a no-show
    + priceClassId: 5 (string) - You can also include the "priceClasses" object
    + personId: 3785526 (string) - You can also include the "people" object. Exclude the name field above when using this field.

## Check In (object)
+ type: check_ins
+ attributes (object)
    + positions: 1,2,3,4 (required, array) - The positions you'd like to pay for

## Carts
+ type: carts
+ id: 64 (string) - The id to use when accessing the cart
+ attributes (object)
    + total: 0.22 (required, number) - Total required to close cart, subtotal + tax.
    + totalDue: 0.22 (required, number) - Total left to be paid
    + tax: 0.22 (required, number) - Total tax in cart
    + subTotal: 0.22 (required, number) - Sub total in cart

## Carts Complete
+ type: carts
+ id: 64 (string) - The id to use when accessing the cart
+ attributes (object)
    + status: complete (required, string) - Total required to close cart, subtotal + tax.

## Cart Payment
+ type: payments
+ attributes (object)
    + type: golfpay (required, enum) - The type of payment recieved
        + Members
            + cash
            + credit_card
            + Customer Payment Type - If you are a third party recieving money on behalf of the course you'll want to use a custom payment type.
    + amount: 0.22 (required, number) - The amount recieved.

## Cart Customer
+ type: customer
+ customerId: 101 (required, number) - ID of the customer to add to the cart

## Bookings Creation (object)
+ type: bookings
+ attributes (object)
    + start: `2017-05-05T12:30:00` (required, string) - The date/time (ISO8601 format)
    + side: front (required, string) - The side you wish to book on. This attribute is required to book a reservation on our old tee sheet, but is ignored if the course is on our revamped tee sheet. Use 'scheduleSideId' instead if using the revamped tee sheet.
    + event_type: `teetime` (optional,string)
    + details: `This was already paid for` (optional,string) - Notes you'd like to save with the tee time
    + scheduleSideId: 2405 (required, number) - The side id you wish to book on.  This attribute is required to book a reservation on our revamped tee sheet, but is ignored if the course is still using our old tee sheet. Use 'side' instead if using the old tee sheet.
    + holes: 18 (optional, enum)
        + Members
            + 9
    + players: 1 (optional,number) - How many players 1-4
    + carts: 1 (optional,number) - How many players will use carts
    + title: `John Snow` (required,string) - The title of the booking
    + booking_class_id: 2918 (optional, number) - This is only required if you'd want to tee time to look as if it were booked as a specific booking class.

## Trade Creation (object)
+ type: bookings
+ attributes (object)
    + start: `2017-05-05T12:30:00` (required, string) - The date/time (ISO8601 format)
    + side: `front` (required, string) - The side you wish to book on. This attribute is required to book a reservation on our old tee sheet, but is ignored if the course is on our revamped tee sheet. Use 'scheduleSideId' instead if using the revamped tee sheet.
    + scheduleSideId: 2405 (number) - The side id you wish to book on.  This attribute is required to book a reservation on our revamped tee sheet, but is ignored if the course is still using our old tee sheet. Use 'side' instead if using the old tee sheet.
    + event_type: `teetime` (optional,string)
    + details: `This is part of a trade` (optional,string) - Notes you'd like to save with the tee time
    + holes: 18 (optional, enum)
        + Members
            + 9
    + players: 1 (optional,number) - How many players 1-4
    + carts: 1 (optional,number) - How many players will use carts
    + title: `John Snow` (required,string) - The title of the booking
    + isTrade: true (required,boolean) - Determines that the booking is a trade
    + amountCharged: 21.01 (required,number) - Amount the booking user was charged
    + tax: 0.11 (required,number) - Tax that the booking user was charged

## Tee Time Slot (object)
+ type: `tee_time_slot`
+ id: `456846` (string)
+ attributes (object)
    + time: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + holes: 18 (number)
    + scheduleName: `White Marsh` (required,string) - This is the same as the tee sheet title
    + scheduleId: `2192` (required,string) - This is the same as the tee sheet id
    + bookingClassId: 23 (number)
    + availableSpots: 4 (required,number) - The number of spots available to book
    + greenFee: 3 (number) The green for for a single person in this slot
    + cartFee: 1 (number) The cart fee for a single person this slot
    + rateType: `both`(enum) The type of booking allowed.  The cart fee and green fee will reflect the type of booking.
        + Members
            + both - Both walking and riding are allowed
            + riding - Only riding is allowed
            + walking - Only walking is allowed
    + greeFeeTax: 0 (number)
    + cartFeeTax: 0 (number)
    + hasSpecial: true (boolean) - Is the price a special
    + specialDiscountPercentage: 50 (number) - The discount percentage provided via the special
    + tradeDiscountAvailable: 0 (number) - If you have trade access, a number greater than `0` indicates a percentage discount available to sell the tee time (`25` = `25% off`)
    + tradeMinPlayersRequired: 0 (number) - Minimum number of players required to offer a trade opportunity to.
    + tradeAvailablePlayers: 0 (number) - The maximum number of trade slots available for purchase for this tee time slot.
    + scheduleSideId: 1234 (number) - The tee sheet side id this time slot belongs to.  This field will only be included in the response if the course is using our revamped tee sheet.
    + scheduleSideName: `Front` (string) - The name of the tee sheet side that can be displayed to a courses customers. This field will only be included in the response if the course is using our revamped tee sheet.
    + reroundScheduleSideId: 1235 (number) - The tee sheet side id that this time slot will reround to. This field will only be included in the response if the course is using our revamped tee sheet.
    + reroundScheduleSideName: `Back` (string) - The name of the tee sheet side that this time slot will reround to and can be displayed to a courses customers. This field will only be included in the response if the course is using our revamped tee sheet.
    + allowedGroupSizes: 1, 2, 3, 4, 5 (array[number]) - An array of required group sizes. Our revamped tee sheet allows the course operator to specify how many spots a customer must book in order to make a reservation.  Unlike the old tee sheet which only allowed the course operator to specify a range, the revamped tee sheet allows a course operator to say they only want to allow groups of size 2 or 4. This field will only be included in the response if the course is using our revamped tee sheet. Also note this field only tells you what group sizes are allowed, not how many availabilites the slot has.  you will need to reference the 'availableSpots' attribute.  Any allowedGroupSize that is over the availableSpots value will be rejected. For example if the allowedGroupSizes = [2,4] and the availableSpots = 2 then a player can only book 2 spots in this time slot.

## Bookings (object)
+ type: bookings (string,required)
+ id: TTID_1018142720xb6jt (string,required) - Unique idenetifier for a booking
+ attributes (object)
    + isReround: false (boolean) - A reround is usually tied to the original booking to mark what time they'll start on the back 9
    + type: teetime (enum[string])
        + Members
            + `league`
            + `shotgun`
            + `event`
            + `tournament`
            + `closed`
            + `deleted`
    + status: checked in (enum[string])
        + Members
            + ``
            + `teed off`
            + `deleted`
    + duration: 1 (number) - The number of increments the booking takes up
    + playerCount: 2 (number)
    + holes: 18 (number)
    + carts: 4 (number)
    + paidPlayerCount: 2 (number)
    + noShowCount: 2 (number)
    + title: Hopkins (string)
    + details: `Reserved using online booking @ 2:53pm` (string)
    + side: front (string)
    + bookingSource: online (enum[string])
        + Members
            + `POS`
            + `standby`
            + `api`
            + ``
    + start: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + end: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + lastUpdated: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + dateBooked: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + isTrade: `false` (boolean) - Indicates if this booking was part of a trade or not
+ relationships (object)
    + players (object)
    + sales (object)

## Trades (object)
+ type: bookings (string,required)
+ id: TTID_1018142720xb6jt (string,required) - Unique identifier for a booking
+ attributes (object)
    + isReround: false (boolean) - A reround is usually tied to the original booking to mark what time they'll start on the back 9
    + type: teetime (enum[string])
        + Members
            + `league`
            + `shotgun`
            + `event`
            + `tournament`
            + `closed`
            + `deleted`
    + status: checked in (enum[string])
        + Members
            + ``
            + `teed off`
            + `deleted`
    + duration: 1 (number) - The number of increments the booking takes up
    + playerCount: 2 (number)
    + holes: 18 (number)
    + carts: 4 (number)
    + paidPlayerCount: 2 (number)
    + noShowCount: 2 (number)
    + title: Hopkins (string)
    + details: `PAID ONLINE` (string)
    + side: front (required, string) - This attribute is used by our old tee sheet.
    + scheduleSideId: 2405 (number) - This attribute is used by our revamped tee sheet and will only be returned if the course is on the revamped tee sheet.
    + bookingSource: online (enum[string])
        + Members
            + `POS`
            + `standby`
            + `api`
            + `apiv2`
    + start: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + end: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + lastUpdated: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + dateBooked: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
+ relationships (object)
    + players (object)
    + sales (object)

## Payments
+ paymentAmount:  20 (number,required) - Total amount paid for by this payment type.
+ invoiceId:  1 (number,required) - A unique identifier the course can link back to their payment processor.
+ type : credit_card (enum[string],required) - Identifier showing how the payment was processed
    + Members
        + `cash`
        + `change`
        + `member_account`
        + `gift_card`
        + `punch_card`


## Sales Items Request
+ itemId:  5311 (number,required) - A valid item id currently found in the courses inventory.
+ quantity:  1 (number,required) - Total items purchased.
+ unitPrice:  10 (number,required) - Price per individual item sold with tax
+ description:  Cool Item (string,optional) - Optional message to save with the item.

## Customer (object)
+ type: customer (string,required)
+ attributes (object)
    + username: username (string)
    + company_name: MyCompany (string)
    + taxable: true (boolean)
    + discount: 0 (number)
    + opt_out_email: false (boolean)
    + opt_out_text: false (boolean)
    + date_created: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
    + contact_info (Person)

## Person (object)
+ id: 2073,
+ first_name: FirstName (string)
+ last_name: LastName (string)
+ phone_number: 801-376-5991 (string)
+ cell_phone_number: 123 123 123 (string)
+ email: foreup@fake.com (string)
+ birthday: `2017-01-09T06:07:00-0700` (string) - The date/time (ISO8601 format)
+ address_1: test 342 (string)
+ address_2: test 342 (string)
+ city: Lindon (string)
+ state: UT (string)
+ zip: 121234 (string)
+ country: USA (string)
+ handicap_account_number: 123 (string) - Could be the customers GHIN number
+ handicap_score: 12 (string) - The customers handicap
+ comments: Best customer ever!! (string)

## Sales Request (object)
+ data (object)
    + type: sales (string,required)
    + attributes (object)
        + employeeId:  "5478650" (string,required) - The id of the employee completing the sale
        + guestCount:  3 (number,optional) - Number of guests on the sale.  Used in reporting.
        + number:  485 (number,required) - The customer facing sale number. Used on reciepts
        + terminalid: 6 (number,required) - The id of the terminal this sale will be recorded under.
        + items (array)
            + (Sales Items Request)
        + payments (array)
            + (Payments)

## Searchable Fields (object)
+ type: field (string,required)
+ attributes (object)
    + name:  company_name (string,required) - The id of the employee completing the sale
    + type:  text (enum[string],required) - The id of the employee completing the sale
        + Members
            + `dropdown`
            + `date`
            + `bool`
            + `number`
    + label:  Company (string,required) - The id of the employee completing the sale
    + possibleValues:  null (string,optional) - The id of the employee completing the sale

## Cart Items (object)
+ type: cart_items (string,required)
+ attributes (object)
    + discountPercent:  0 (number)
    + quantity:  1 (number)
    + unitPrice:  10 (number)
    + priceIncludesTax:  true (boolean)
    + itemType:  green_fee (string)
    + itemId:  10 (number)

## Booking Pricing (object)
+ type: teetimePricing (string,required)
+ attributes (object)
    + priceClassId:  5478650 (string,required)
    + name:  Member (string) - Name of the price class
    + isDefault:  true (boolean) - Number of guests on the sale.  Used in reporting.
    + 9holePrice:  10 (number)
    + 9cartPrice:  10 (number)
    + 18holePrice:  10 (number)
    + 18cartPrice:  10 (number)

## Price Class (object)
+ type: priceClass (string,required)
+ id:  5 (string,optional)
+ attributes (object)
    + name:  Member (string,required)
    + color:  #6ea4e1 (string,required) - Valid hex color.
    + dateCreated:  `2014-05-29T18:48:59-0600` (string)
    + isDynamic: false (boolean)

## Price Override (object)
+ type: priceOverride (string,required)
+ id:  5 (string,optional)
+ attributes (object)
    + unitPrice: 23.72 (number),

## CreateItem (object)
+ type: items (string,required)
+ attributes (object)
    + name: Driver (string, required),
    + category: Services (string, required),
    + itemType: item (enum[string], required)
        + Members
            + `food and beverage`
            + `side`
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 20.05 (number, required),
    + isUnlimited: false(boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + itemNumber: 1234 (string, optional),
    + subcategory: Anything (string, optional),
    + glCode: GA23 (string, optional),
    + isInactive:  false (boolean, optional),
    + doNotPrint: false (boolean, optional),
    + isFoodAndBeverage: false (boolean, optional),
    + isInvisible: false (boolean, optional),
    + isFee: false (boolean, optional),
    + isGiftcard: false (boolean, optional),
    + isPass: false (boolean, optional),
    + isSide: false (boolean, optional)
    + isSoupOrSalad: none (enum[string], optional)
        + Members
            + `either`
            + `both`
            + `salad`
            + `soup`,
    + unitPriceIncludesTax: false (boolean, optional)
    + reorderLevel: 0 (number, optional)
    + numberOfSides: 0 (number, optional)
    + taxes: [{"name": "Sales Tax","percent": 8.25,"cumulative": false}] (array[object])
        + (Item Tax Request)
    + upcs: ["5000","5000A","5000B"] (array)
        + 5000 (string)
        + 5000A (string)
        + 5000B (string)

+ meta (object,optional)
    + warnings (array, optional)

## CreateFBItem (object)
+ type: items (string,required)
+ attributes (object)
    + name: Grilled Salmon (string, required),
    + category: Food (string, required),
    + itemType: food and beverage (enum[string], required)
        + Members
            + `side`
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 10.05 (number, required),
    + isUnlimited: false (boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + itemNumber: 1234 (string, optional),
    + subcategory: Anything (string, optional),
    + glCode: GA230 (string, optional),
    + isInactive:  false (boolean, optional),
    + doNotPrint: false (boolean, optional),
    + isFoodAndBeverage: true (boolean, optional),
    + isInvisible: false (boolean, optional),
    + isFee: false (boolean, optional),
    + isGiftcard: false (boolean, optional),
    + isPass: false (boolean, optional),
    + isSide: false (boolean, optional)
    + isSoupOrSalad: none (enum[string], optional)
        + Members
            + `either`
            + `both`
            + `salad`
            + `soup`,
    + unitPriceIncludesTax: false (boolean, optional)
    + reorderLevel: 0 (number, optional)
    + numberOfSides: 0 (number, optional)

+ meta (object,optional)
    + warnings (array, optional)

## CreatedFBItem (object)
+ type: items (string,required)
+ id:  5 (string,optional)
+ attributes (object)
    + name: Grilled Salmon (string, required),
    + category: Food (string, required),
    + itemType: food and beverage (enum[string], required)
        + Members
            + `side`
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 10.05 (number, required),
    + isUnlimited: false (boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + itemNumber: 1234 (string, optional),
    + subcategory: Anything (string, optional),
    + glCode: GA230 (string, optional),
    + isInactive:  false (boolean, optional),
    + doNotPrint: false (boolean, optional),
    + isFoodAndBeverage: true (boolean, optional),
    + isInvisible: false (boolean, optional),
    + isFee: false (boolean, optional),
    + isGiftcard: false (boolean, optional),
    + isPass: false (boolean, optional),
    + isSide: false (boolean, optional)
    + isSoupOrSalad: none (enum[string], optional)
        + Members
            + `either`
            + `both`
            + `salad`
            + `soup`,
    + unitPriceIncludesTax: false (boolean, optional)
    + reorderLevel: 0 (number, optional)
    + numberOfSides: 0 (number, optional)

+ meta (object,optional)
    + warnings (array, optional)

## UpdateFoodItem (object)
+ type: items (string,required)
+ attributes (object)
    + name: Grilled Salmon (string),
    + category: Food (string),
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 10.05 (number, required),
    + isUnlimited: false(boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + subcategory: Anything (string, optional),
    + isInvisible: false(boolean, optional),
    + unitPriceIncludesTax: false (boolean, optional)
    + reorderLevel: 0 (number, optional)

+ meta (object,optional)
    + warnings (array, optional)
    

## Item (object)
+ type: items (string,required)
+ id:  5 (string,optional)
+ attributes (object)
    + name: Driver (string, required),
    + category: Services (string, required),
    + itemType: item (enum[string], required)
        + Members
            + `food and beverage`
            + `side`
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 20.05 (number, required),
    + isUnlimited: false (boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + itemNumber: 1234 (string, optional),
    + subcategory: Anything (string, optional),
    + glCode: GA23 (string, optional),
    + isInactive:  false (boolean, optional),
    + doNotPrint: false (boolean, optional),
    + isFoodAndBeverage: false (boolean, optional),
    + isInvisible: false (boolean, optional),
    + isFee: false (boolean, optional),
    + isGiftcard: false (boolean, optional),
    + isPass: false (boolean, optional),
    + isSide: false (boolean, optional)
    + isSoupOrSalad: none (enum[string], optional)
        + Members
            + `either`
            + `both`
            + `salad`
            + `soup`,
    + unitPriceIncludesTax: false (boolean, optional)
    + reorderLevel: 0 (number, optional)
    + numberOfSides: 0 (number, optional)

+ meta (object,optional)
    + warnings (array, optional)

## UpdateItem (object)
+ type: items (string,required)
+ attributes (object)
    + name: Putter (string),
    + category: Services (string),
    + description: Some description (string, required),
    + department: Anything (string, required),
    + costPrice: 20.05 (number, required),
    + isUnlimited: false (boolean, required),
    + maxDiscount: 100 (number, optional),
    + addOnPrice: 0 (number, optional),
    + quantity: 1000 (number, optional),
    + unitPrice: 22.59 (number, required),
    + subcategory: Anything (string, optional),
    + isInactive: false (boolean, optional),
    + unitPriceIncludesTax: false (boolean, optional),
    + reorderLevel: 0 (number, optional),
    + taxes: [{"name": "Sales Tax","percent": 8.25,"cumulative": false}] (array[object])
        + (Item Tax Request)
    + upcs: ["5000","5000A","5000B"] (array)
        + 5000 (string)
        + 5000A (string)
        + 5000B (string)

+ meta (object,optional)
    + warnings (array, optional)

## Special (object)
+ type: special (string,required)
+ id:  5 (string,optional)
+ attributes (object)
    + name: Booking Special (string),
    + date: `2014-05-29` (string),
    + holePrice9: 1.00 (number),
    + cartPrice9: 1.00 (number),
    + holePrice18: 1.00 (number),
    + cartPrice18: 1.00 (number),
    + monday: true (boolean),
    + tuesday: true (boolean),
    + wednesday: true (boolean),
    + thursday: true (boolean),
    + friday: true (boolean),
    + saturday: false (boolean),
    + sunday: false (boolean),
    + isRecurring: true (boolean),
    + isAggregate: false (boolean),
    + active: true (boolean),
    + bookingClassId: 1 (number,optional),
    + times (array)
        + 0930 (string)
        + 0938 (string)
        
## TestingMeta (object)
+ testing: true (boolean, optional)
+ validateOnly: true (boolean,optional)

## Item Tax Request
+ name: Sales Tax (string,required) - The name of the tax to be used
+ percent: 8.25 (number,required) - The percentage used to tax
+ cumulative: false (boolean)

## Room Object
+ roomNumber: 100 (string)
+ guestName: John Smith (string)
+ roomName: Penthouse Suite (string) - This is an optional field to include in the PMS response


# Group Property Management Systems
Property Management Systems (PMS) integrated with foreUP use these API endpoints, as outlined in this specification. 
In order to properly integrate with us, PMS partners will need to ensure their server-side API handles the transactions described below.
Please note that these endpoints are descriptions of our API requests to the PMS's own API.


Our API is capable of searching our PMS partners' rooms by guest name and room number. The API is also capable of posting charges to selected rooms based on the response of the PMS partner.
## Setup
In order to utilize these endpoints, you will need to be set up manually first. If you're interested in becoming a partner, please contact us.

We will need to store a `base url` that points to your root API endpoint. This is the `base url` we will call in our requests to your servers. 

<strong>In the following examples, replace the request URL (`mobile.foreupsoftware.com/api_rest/index.php`) with your own `base_url`.</strong>

Example: If my PMS server's API is located at `https://mycompany.com`, requests will be made to `https://mycompany.com/token` for the below example.
## Authentication [/token]


We call this endpoint with a username and password, which is provided within our software by the PMS partner and foreUP's mutual customer. These are the credentials the customer uses to access the PMS.

This token is stored so that subsequent API calls made to the PMS software are properly authenticated.
### Create a New Token [POST]
Given the `POST` request data from the foreUP software, the response from the PMS server should match the response in the example here for a valid token. Invalid responses should be a `404` error.


+ Request (application/json)

            {
            "username": "testaccount@test.com",
            "password": "password"
            }

+ Response 200 (application/json)

    + Body

            {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0NzQ5MjI5MzgsImV4cCI6MTQ3NzUxNDkzOCwibGV2ZWwiOjAsImNpZCI6MCwiZW1wbG95ZWUiOmZhbHNlLCJ1aWQiOjY0ODI3Mjh9.go-Bf_6X8qByMu9JblewsmQt1dsqOu_70z6IlYYaZgGbsvjf9uQI0-RFSEivALntv0HF6-6WN9T5FxLpGyxcNA"
            }
            
## Rooms [/room?search={{URL_Encoded_String}}]


We call this endpoint in order to search occupied rooms in the PMS. It is expected that the PMS returns a list of occupied rooms that match the search query.
It's possible that multiple rooms could be returned, in which case our interface allows the customer to select the intended room. Customers may search by room number, or guest name.

### Search [GET]
In the event a `roomName` is not returned, the `roomNumber` will be displayed to the customer in the user interface.

+ Request (application/json)

    + Headers

            x-authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJhdWQiOiJmb3JldXBzb2Z0d2FyZS5jb20iLCJpYXQiOjE0Nzg5MDQxMDIsImV4cCI6MTUxMDAwODEwMiwibGV2ZWwiOjMsImNpZCI6OTAzOSwiZW1wbG95ZWUiOnRydWUsInVpZCI6MTYzNywiZW1wSWQiOjE2MzcsImFwcElkIjo2NDgyNzI4LCJwcmljZUNsYXNzSWQiOm51bGx9.ooY5m1n3qurbJhkRzrviVPVailuKnLXbImHO8-y-p9ryejEpeE-IUrS_APJpAQcGTxY7YCQL_qhRgRbeSriW8A

+ Parameters
    + URL_ENCODED_STRING : "100" or "Smith" - A string representing a room number or customer name
    
+ Response 200 (application/json)
    
        [
            {
                "roomNumber": "200",
                "guestName": "Smith",
            },
            {
                "roomNumber": "100",
                "guestName": "Johnson",
            },
            {
                "roomNumber": "1000",
                "guestName": "Doe",
                "roomName": "Penthouse Suite"
            },
        ]
    

## Post Charges to Room [/room/{roomNumber}/charge]
Adds a charge to a room. The charge includes details such as the items of the transaction, etc. foreUP calls this endpoint when a customer selects a room
from the POS interface and attempts to run the "Charge Room" payment option. The PMS will need to consume the data correctly in order to ensure the charge
details are recorded correctly in the PMS.

Note: Voiding a charge sent to a room is not currently supported.

### Charge Room [POST]

+ Request (application/json)

    {
        "id": "11251",
        "date": "2015-01-01T12:00:00.000Z",
        "waiterName": "John Doe",
        "guestName":"Guest 1",
        "amount": 79.0000,
        "receiptId": "11251",
        "details": [
            {
                "productId": 10,
                "name": "Ball Bucket",
                "productGroupName": "Pro Shop",
                "amount": 1,
                "price": 9.0000
            },
            {
                "productId": 22,
                "name": "Burgers",
                "productGroupName": "Food & Bev",
                "amount": 1,
                "price": 70.0000
            }
        ],
        "vatDetails":[
            {
                "name":"21.0%",
                "vatPercentage":21.0,
                "priceWithVat":79.0000,
                "priceWithoutVat":62.4100,
                "vat":16.59,
                "taxClass":false
            }
        ],
        "paymentDetails":[
            {
                "amount":79.0000,
                "tips":0.0000,
                "type":"put on room",
                "paymentTypeTypeId":9
            }
         ]
    }   

+ Response 200 (application/json)

    + Body

        {
            "roomNumber": "2100",
            "guestName": "John Doe",
            "canCharge": true,
            "chargeLimit": 300.0
        }  

### Charge Room - Error Response [POST]
This shows what the PMS server response should be if the Room rejects the charge, or the charge amount exceeds charge limit.
Error codes are 

`1000: Room does not allow charge`
`1001: Charge amount exceeds charge limit`
+ Request (application/json)

    {
        "id": "11251",
        "date": "2015-01-01T12:00:00.000Z",
        "waiterName": "John Doe",
          "guestName":"Guest 1",
          "amount": 79.0000,
          "receiptId": "11251",
          "details": [
                {
                  "productId": 10,
                  "name": "Ball Bucket",
                  "productGroupName": "Pro Shop",
                  "amount": 1,
                  "price": 9.0000
                },
                {
                  "productId": 22,
                  "name": "Burgers",
                  "productGroupName": "Food & Bev",
                  "amount": 1,
                  "price": 70.0000
                }
            ],
          "vatDetails":[
             {
                "name":"21.0%",
                "vatPercentage":21.0,
                "priceWithVat":79.0000,
                "priceWithoutVat":62.4100,
                "vat":16.59,
                "taxClass":false
             }
          ],
          "paymentDetails":[
             {
                "amount":79.0000,
                "tips":0.0000,
                "type":"put on room",
                "paymentTypeTypeId":9
             }
          ]
    }   

+ Response 200 (application/json)

    + Body

        {
            "errorCode": "1000",
            "errorDescription": "Room does not allow charge"
        }